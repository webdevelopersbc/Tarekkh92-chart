{"version":3,"sources":["../node_modules/react-bootstrap/esm/Alert.js","app/notifications/Notifications.js"],"names":["_excluded","DivStyledAsH4","divWithClassName","displayName","AlertHeading","createWithBsPrefix","Component","AlertLink","SafeAnchor","defaultProps","show","transition","Fade","closeLabel","Alert","forwardRef","uncontrolledProps","ref","_useUncontrolled","bsPrefix","className","children","variant","onClose","dismissible","props","prefix","handleClose","useEventCallback","e","Transition","alert","createElement","role","undefined","CloseButton","onClick","label","unmountOnExit","in","Link","Heading","Notifications","toastoptions","hideAfter","position","heading","aria-label","href","event","preventDefault","aria-current","type","cogoToast","success","info","warn","error","map","idx","key"],"mappings":"qSAEIA,EAAY,CAAC,WAAY,OAAQ,aAAc,YAAa,WAAY,UAAW,UAAW,cAAe,cAW7GC,EAAgB,OAAAC,EAAA,GAAiB,MACrCD,EAAcE,YAAc,gBAC5B,IAAIC,EAAe,OAAAC,EAAA,GAAmB,gBAAiB,CACrDC,UAAWL,IAETM,EAAY,OAAAF,EAAA,GAAmB,aAAc,CAC/CC,UAAWE,EAAA,IAETC,EAAe,CACjBC,MAAM,EACNC,WAAYC,EAAA,EACZC,WAAY,eAEVC,EAEJ,IAAMC,YAAW,SAAUC,EAAmBC,GAC5C,IAAIC,EAAmB,YAAgBF,EAAmB,CACxDN,KAAM,YAEJS,EAAWD,EAAiBC,SAC5BT,EAAOQ,EAAiBR,KACxBG,EAAaK,EAAiBL,WAC9BO,EAAYF,EAAiBE,UAC7BC,EAAWH,EAAiBG,SAC5BC,EAAUJ,EAAiBI,QAC3BC,EAAUL,EAAiBK,QAC3BC,EAAcN,EAAiBM,YAC/Bb,EAAaO,EAAiBP,WAC9Bc,EAAQ,YAA8BP,EAAkBlB,GAExD0B,EAAS,YAAmBP,EAAU,SACtCQ,EAAc,OAAAC,EAAA,IAAiB,SAAUC,GACvCN,GACFA,GAAQ,EAAOM,MAGfC,GAA4B,IAAfnB,EAAsBC,EAAA,EAAOD,EAC1CoB,EAEJ,IAAMC,cAAc,MAAO,YAAS,CAClCC,KAAM,SACJH,OAAqBI,EAART,EAAmB,CAClCR,IAAKA,EACLG,UAAW,IAAWA,EAAWM,EAAQJ,GAAWI,EAAS,IAAMJ,EAASE,GAAeE,EAAS,kBAClGF,GAEJ,IAAMQ,cAAcG,EAAA,EAAa,CAC/BC,QAAST,EACTU,MAAOxB,IACLQ,GACJ,OAAKS,EAGH,IAAME,cAAcF,EAAY,YAAS,CACvCQ,eAAe,GACdb,EAAO,CACRR,SAAKiB,EACLK,GAAI7B,IACFqB,GARkBrB,EAAOqB,EAAQ,QAWzCjB,EAAMX,YAAc,QACpBW,EAAML,aAAeA,EACrBK,EAAM0B,KAAOjC,EACbO,EAAM2B,QAAUrC,EACD,Q,8CC1ER,IAAMsC,EAAb,2MAEIC,aAAe,CACXC,UAAW,EACXC,SAAU,YACVC,QAAS,aALjB,wEAQc,IAAD,OACL,OACI,6BACI,yBAAK1B,UAAU,eACX,wBAAIA,UAAU,cAAd,iBAGA,yBAAK2B,aAAW,cACZ,wBAAI3B,UAAU,cACd,wBAAIA,UAAU,mBAAkB,uBAAG4B,KAAK,KAAKZ,QAAS,SAAAa,GAAK,OAAIA,EAAMC,mBAArC,gBAChC,wBAAI9B,UAAU,yBAAyB+B,eAAa,QAApD,oBAIR,yBAAK/B,UAAU,OACX,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAd,gBACA,uBAAGA,UAAU,yBAAb,qEAGA,uBAAGA,UAAU,oBAAb,0EAGA,yBAAKA,UAAU,6DACX,4BAAQgC,KAAK,SAAShC,UAAU,yBAAyBgB,QAAS,kBAAMiB,IAAUC,QAAQ,6BAA8B,EAAKX,gBAA7H,WACA,4BAAQS,KAAK,SAAShC,UAAU,sBAAsBgB,QAAS,kBAAMiB,IAAUE,KAAK,6BAA8B,EAAKZ,gBAAvH,QACA,4BAAQS,KAAK,SAAShC,UAAU,yBAAyBgB,QAAS,kBAAMiB,IAAUG,KAAK,6BAA8B,EAAKb,gBAA1H,WACA,4BAAQS,KAAK,SAAShC,UAAU,wBAAwBgB,QAAS,kBAAMiB,IAAUI,MAAM,6BAA8B,EAAKd,gBAA1H,aAKhB,yBAAKvB,UAAU,sBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAd,mBACA,uBAAGA,UAAU,yBAAb,OACI,0CADJ,wEAGA,uBAAGA,UAAU,oBAAb,0EAGA,yBAAKA,UAAU,6DACX,4BAAQgC,KAAK,SAAShC,UAAU,iCAAiCgB,QAAS,kBAAMiB,IAAUE,KAAK,YAAa,CAACV,SAAU,eAAvH,YACA,4BAAQO,KAAK,SAAShC,UAAU,iCAAiCgB,QAAS,kBAAMiB,IAAUE,KAAK,cAAe,CAACV,SAAU,iBAAzH,cACA,4BAAQO,KAAK,SAAShC,UAAU,iCAAiCgB,QAAS,kBAAMiB,IAAUE,KAAK,aAAc,CAACV,SAAU,gBAAxH,aACA,4BAAQO,KAAK,SAAShC,UAAU,iCAAiCgB,QAAS,kBAAMiB,IAAUE,KAAK,eAAgB,CAACV,SAAU,kBAA1H,eACA,4BAAQO,KAAK,SAAShC,UAAU,iCAAiCgB,QAAS,kBAAMiB,IAAUE,KAAK,iBAAkB,CAACV,SAAU,oBAA5H,iBACA,4BAAQO,KAAK,SAAShC,UAAU,iCAAiCgB,QAAS,kBAAMiB,IAAUE,KAAK,gBAAiB,CAACV,SAAU,mBAA3H,oBAKhB,yBAAKzB,UAAU,qCACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAd,mBACA,uBAAGA,UAAU,oBAAb,gIAC6H,yCAD7H,MAII,CACI,UACA,YACA,UACA,SACA,UACA,OACA,QACA,QACAsC,KAAI,SAACpC,EAASqC,GAAV,OACJ,kBAAC,EAAD,CAAOC,IAAKD,EAAKrC,QAASA,GAA1B,aACaA,EADb,mCAQpB,yBAAKF,UAAU,qCACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAd,gBACA,uBAAGA,UAAU,oBAAb,0FACA,kBAAC,EAAD,CAAOE,QAAQ,aACX,uBAAGF,UAAU,YAAb,kEAGA,uBAAGA,UAAU,YACT,4BAAQA,UAAU,+BAAlB,MAA2D,4BAAQA,UAAU,kCAAlB,YAGnE,kBAAC,EAAD,CAAOE,QAAQ,QACX,uBAAGF,UAAU,YAAb,4EAGA,uBAAGA,UAAU,YACT,4BAAQA,UAAU,0BAAlB,MAAsD,4BAAQA,UAAU,sBAAlB,qBA3G9F,GAAmCd,aAuHpBoC","file":"static/js/109.14548a7d.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"bsPrefix\", \"show\", \"closeLabel\", \"className\", \"children\", \"variant\", \"onClose\", \"dismissible\", \"transition\"];\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport Fade from './Fade';\nimport CloseButton from './CloseButton';\nimport divWithClassName from './divWithClassName';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport SafeAnchor from './SafeAnchor';\nvar DivStyledAsH4 = divWithClassName('h4');\nDivStyledAsH4.displayName = 'DivStyledAsH4';\nvar AlertHeading = createWithBsPrefix('alert-heading', {\n  Component: DivStyledAsH4\n});\nvar AlertLink = createWithBsPrefix('alert-link', {\n  Component: SafeAnchor\n});\nvar defaultProps = {\n  show: true,\n  transition: Fade,\n  closeLabel: 'Close alert'\n};\nvar Alert =\n/*#__PURE__*/\nReact.forwardRef(function (uncontrolledProps, ref) {\n  var _useUncontrolled = useUncontrolled(uncontrolledProps, {\n    show: 'onClose'\n  }),\n      bsPrefix = _useUncontrolled.bsPrefix,\n      show = _useUncontrolled.show,\n      closeLabel = _useUncontrolled.closeLabel,\n      className = _useUncontrolled.className,\n      children = _useUncontrolled.children,\n      variant = _useUncontrolled.variant,\n      onClose = _useUncontrolled.onClose,\n      dismissible = _useUncontrolled.dismissible,\n      transition = _useUncontrolled.transition,\n      props = _objectWithoutPropertiesLoose(_useUncontrolled, _excluded);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'alert');\n  var handleClose = useEventCallback(function (e) {\n    if (onClose) {\n      onClose(false, e);\n    }\n  });\n  var Transition = transition === true ? Fade : transition;\n  var alert =\n  /*#__PURE__*/\n  React.createElement(\"div\", _extends({\n    role: \"alert\"\n  }, !Transition ? props : undefined, {\n    ref: ref,\n    className: classNames(className, prefix, variant && prefix + \"-\" + variant, dismissible && prefix + \"-dismissible\")\n  }), dismissible &&\n  /*#__PURE__*/\n  React.createElement(CloseButton, {\n    onClick: handleClose,\n    label: closeLabel\n  }), children);\n  if (!Transition) return show ? alert : null;\n  return (\n    /*#__PURE__*/\n    React.createElement(Transition, _extends({\n      unmountOnExit: true\n    }, props, {\n      ref: undefined,\n      in: show\n    }), alert)\n  );\n});\nAlert.displayName = 'Alert';\nAlert.defaultProps = defaultProps;\nAlert.Link = AlertLink;\nAlert.Heading = AlertHeading;\nexport default Alert;","import React, { Component } from 'react'\r\nimport cogoToast from 'cogo-toast';\r\nimport Alert from 'react-bootstrap/Alert'\r\n\r\nexport class Notifications extends Component {\r\n\r\n    toastoptions = {\r\n        hideAfter: 5,\r\n        position: 'top-right',\r\n        heading: 'Attention'\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"page-header\">\r\n                    <h3 className=\"page-title\">\r\n                        Notifications\r\n                    </h3>\r\n                    <nav aria-label=\"breadcrumb\">\r\n                        <ol className=\"breadcrumb\">\r\n                        <li className=\"breadcrumb-item\"><a href=\"!#\" onClick={event => event.preventDefault()}>UI Features</a></li>\r\n                        <li className=\"breadcrumb-item active\" aria-current=\"page\">Notifications</li>\r\n                        </ol>\r\n                    </nav>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 grid-margin\">\r\n                        <div className=\"card px-3\">\r\n                            <div className=\"card-body\">\r\n                                <h4 className=\"card-title\">Toast Styles</h4>\r\n                                <p className=\"card-description mb-0\">\r\n                                Click on the below buttons for notifications in different styles. \r\n                                </p>\r\n                                <p className=\"card-description\">\r\n                                Specify the predefined types of toasts - success, info, warn and error\r\n                                </p>\r\n                                <div className=\"template-demo d-flex justify-content-md-between flex-wrap\">\r\n                                    <button type=\"button\" className=\"btn btn-success btn-fw\" onClick={() => cogoToast.success('This is a success message!', this.toastoptions)} >Success</button>\r\n                                    <button type=\"button\" className=\"btn btn-info btn-fw\" onClick={() => cogoToast.info('This is a success message!', this.toastoptions)} >Info</button>\r\n                                    <button type=\"button\" className=\"btn btn-warning btn-fw\" onClick={() => cogoToast.warn('This is a success message!', this.toastoptions)} >Warning</button>\r\n                                    <button type=\"button\" className=\"btn btn-danger btn-fw\" onClick={() => cogoToast.error('This is a success message!', this.toastoptions)} >Error</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-12 grid-margin\">\r\n                        <div className=\"card px-3\">\r\n                            <div className=\"card-body\">\r\n                                <h4 className=\"card-title\">Toast Positions</h4>\r\n                                <p className=\"card-description mb-0\">\r\n                                The <code>position</code> property can be used to specify the predefined positions of toasts.\r\n                                </p>\r\n                                <p className=\"card-description\">\r\n                                Specify the predefined types of toasts - success, info, warn and error\r\n                                </p>\r\n                                <div className=\"template-demo d-flex justify-content-md-between flex-wrap\">\r\n                                    <button type=\"button\" className=\"btn btn-outline-primary btn-sm\" onClick={() => cogoToast.info('Top Left!', {position: 'top-left'})} >Top Left</button>\r\n                                    <button type=\"button\" className=\"btn btn-outline-primary btn-sm\" onClick={() => cogoToast.info('Top Center!', {position: 'top-center'})} >Top Center</button>\r\n                                    <button type=\"button\" className=\"btn btn-outline-primary btn-sm\" onClick={() => cogoToast.info('Top Right!', {position: 'top-right'})} >Top Right</button>\r\n                                    <button type=\"button\" className=\"btn btn-outline-primary btn-sm\" onClick={() => cogoToast.info('Bottom Left!', {position: 'bottom-left'})} >Bottom Left</button>\r\n                                    <button type=\"button\" className=\"btn btn-outline-primary btn-sm\" onClick={() => cogoToast.info('Bottom Center!', {position: 'bottom-center'})} >Bottom Center</button>\r\n                                    <button type=\"button\" className=\"btn btn-outline-primary btn-sm\" onClick={() => cogoToast.info('Bottom Right!', {position: 'bottom-right'})} >Bottom Right</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-md-6 grid-margin stretch-card\">\r\n                        <div className=\"card\">\r\n                            <div className=\"card-body\">\r\n                                <h4 className=\"card-title\">Bootstrap alert</h4>\r\n                                <p className=\"card-description\">\r\n                                Alerts are available for any length of text, as well as an optional dismiss button. For proper styling, use one of the eight <code>variant</code>s.\r\n                                </p>\r\n                                {\r\n                                    [\r\n                                        'primary',\r\n                                        'secondary',\r\n                                        'success',\r\n                                        'danger',\r\n                                        'warning',\r\n                                        'info',\r\n                                        'light',\r\n                                        'dark',\r\n                                      ].map((variant, idx) => (\r\n                                        <Alert key={idx} variant={variant}>\r\n                                          This is a {variant} alert—check it out!\r\n                                        </Alert>\r\n                                      ))\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-md-6 grid-margin stretch-card\">\r\n                        <div className=\"card\">\r\n                            <div className=\"card-body\">\r\n                                <h4 className=\"card-title\">Custom alert</h4>\r\n                                <p className=\"card-description\">Alerts can contain whatever content you like. Headers, paragraphs, dividers, go crazy.</p>\r\n                                <Alert variant=\"secondary\">\r\n                                    <p className=\"p-3 mb-0\">\r\n                                    Well done! You successfully read this important alert message.\r\n                                    </p>\r\n                                    <p className=\"mb-0 p-3\">\r\n                                        <button className=\"btn btn-secondary mb-2 mr-2\">Ok</button><button className=\"btn btn-inverse-secondary mb-2\">Cancel</button>\r\n                                    </p>\r\n                                </Alert>\r\n                                <Alert variant=\"info\">\r\n                                    <p className=\"p-3 mb-0\">\r\n                                    Heads up! This alert needs your attention, but it's not super important.\r\n                                    </p>\r\n                                    <p className=\"mb-0 p-3\">\r\n                                        <button className=\"btn btn-info mb-2 mr-2\">Ok</button><button className=\"btn btn-light mb-2\">Cancel</button>\r\n                                    </p>\r\n                                </Alert>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Notifications\r\n"],"sourceRoot":""}